#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Created on 2017.10.19

@author: Patrick Nagel, Roberto Cai
"""

import rospy
import smach

from smach_ros import ActionServerWrapper, IntrospectionServer
from mdr_execute_command_action.msg import ExecutionAction, ExecutionResult, ExecutionFeedback
from mdr_execute_command_action.action_states import InitializeExecuteCommand, InitializationError,\
                                    MatchCommand, MatchError


class ExecutionSkill(smach.StateMachine):

    def __init__(self):
        smach.StateMachine.__init__(self,
                                    outcomes=['OVERALL_SUCCESS', 'OVERALL_FAILED', 'PREEMPTED'],
                                    input_keys=['execution_goal'],
                                    output_keys=['execution_feedback', 'execution_result'])
        with self:
            smach.StateMachine.add('INITIALIZE_EXECUTE_COMMAND', InitializeExecuteCommand(),
                                   transitions={'succeeded':'MATCH_COMMAND',
                                                'failed':'INITIALIZATION_ERROR',
                                                'processing':'INITIALIZE_EXECUTE_COMMAND'})
            smach.StateMachine.add('INITIALIZATION_ERROR', InitializationError(),
                                   transitions={'error_detected':'OVERALL_FAILED',
                                                'processing':'INITIALIZATION_ERROR'})
            smach.StateMachine.add('MATCH_COMMAND', MatchCommand(),
                                   transitions={'succeeded':'OVERALL_SUCCESS',
                                                'command_not_found':'MATCH_ERROR',
                                                'processing':'MATCH_COMMAND'})
            smach.StateMachine.add('MATCH_ERROR', MatchError(),
                                   transitions={'error_detected':'OVERALL_FAILED',
                                                'processing':'MATCH_ERROR'})


if __name__ == '__main__':
    rospy.init_node('execute_command_server')

    # construct state machine
    sm = ExecutionSkill()

    # smach viewer
    sis = IntrospectionServer('execute_command_smach_viewer', sm, '/EXECUTE_COMMAND_SMACH_VIEWER')
    sis.start()

    # construct the action server wrapper
    asw = ActionServerWrapper(
        server_name='execute_command_server',
        action_spec=ExecutionAction,
        wrapped_container=sm,
        succeeded_outcomes=['OVERALL_SUCCESS'],
        aborted_outcomes=['OVERALL_FAILED'],
        preempted_outcomes=['PREEMPTED'],
        goal_key='execution_goal',
        feedback_key='execution_feedback',
        result_key='execution_result')

    # Run the server in the background thread
    asw.run_server()
    rospy.spin()
